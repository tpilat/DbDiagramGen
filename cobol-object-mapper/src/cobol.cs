// parser.cs

// DO NOT EDIT THIS FILE
// This file was generated using the Human Parser Generator (https://github.com/christophevg/human-parser-generator)


using System;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;
using System.Diagnostics;


public class Copybook {
  public List<Record> Records { get; set; }
  public Copybook() {
    this.Records = new List<Record>();
  }
  public override string ToString() {
    return
    "Copybook(" +
    "Records=" + "[" +
    string.Join(",", this.Records.Select(x => x.ToString())) +
    "]" +
    ")";
  }
}

public interface Record {}

public class RenamesRecord : Record {
  public LevelName LevelName { get; set; }
  public IdentifierRange IdentifierRange { get; set; }
  public override string ToString() {
    return
    "RenamesRecord(" +
    "LevelName=" + this.LevelName + "," +
    "IdentifierRange=" + this.IdentifierRange +
    ")";
  }
}

public class LevelName {
  public bool HasFiller { get; set; }
  public Identifier Identifier { get; set; }
  public override string ToString() {
    return
    "LevelName(" +
    "HasFiller=" + this.HasFiller + "," +
    "Identifier=" + this.Identifier +
    ")";
  }
}

public class IdentifierRange {
  public Identifier Identifier { get; set; }
  public Identifier Through { get; set; }
  public override string ToString() {
    return
    "IdentifierRange(" +
    "Identifier=" + this.Identifier + "," +
    "Through=" + this.Through +
    ")";
  }
}

public class ValuesRecord : Record {
  public LevelName LevelName { get; set; }
  public List<Value> Values { get; set; }
  public ValuesRecord() {
    this.Values = new List<Value>();
  }
  public override string ToString() {
    return
    "ValuesRecord(" +
    "LevelName=" + this.LevelName + "," +
    "Values=" + "[" +
    string.Join(",", this.Values.Select(x => x.ToString())) +
    "]" +
    ")";
  }
}

public interface Value {}

public interface Literal : Value, Symbolic {}

public class Variable : Value, Symbolic {
  public Identifier Identifier { get; set; }
  public Subset Subset { get; set; }
  public override string ToString() {
    return
    "Variable(" +
    "Identifier=" + this.Identifier + "," +
    "Subset=" + this.Subset +
    ")";
  }
}

public class Subset {
  public Numeric Limit { get; set; }
  public Subset Next { get; set; }
  public override string ToString() {
    return
    "Subset(" +
    "Limit=" + this.Limit + "," +
    "Next=" + this.Next +
    ")";
  }
}

public interface Numeric {}

public class BasicRecord : Record {
  public Int Level { get; set; }
  public LevelName LevelName { get; set; }
  public List<Option> Options { get; set; }
  public BasicRecord() {
    this.Options = new List<Option>();
  }
  public override string ToString() {
    return
    "BasicRecord(" +
    "Level=" + this.Level + "," +
    "LevelName=" + this.LevelName + "," +
    "Options=" + "[" +
    string.Join(",", this.Options.Select(x => x.ToString())) +
    "]" +
    ")";
  }
}

public interface Option {}

public class RedefinesOption : Option {
  public Identifier Redefined { get; set; }
  public override string ToString() {
    return
    "RedefinesOption(" +
    "Redefined=" + this.Redefined +
    ")";
  }
}

public class ExternalOption : Option {

  public override string ToString() {
    return
    "ExternalOption(" +
    ")";
  }
}

public class InternalOption : Option {

  public override string ToString() {
    return
    "InternalOption(" +
    ")";
  }
}

public interface UsageOption : Option {}

public class SignOption : Option {
  public bool HasLeading { get; set; }
  public bool HasTrailing { get; set; }
  public bool HasSeparate { get; set; }
  public bool HasCharacter { get; set; }
  public override string ToString() {
    return
    "SignOption(" +
    "HasLeading=" + this.HasLeading + "," +
    "HasTrailing=" + this.HasTrailing + "," +
    "HasSeparate=" + this.HasSeparate + "," +
    "HasCharacter=" + this.HasCharacter +
    ")";
  }
}

public class OccursOption : Option {
  public Numeric Amount { get; set; }
  public Numeric UpperBound { get; set; }
  public Identifier DependsOn { get; set; }
  public List<Key> Keys { get; set; }
  public List<Identifier> Indexes { get; set; }
  public OccursOption() {
    this.Keys = new List<Key>();
    this.Indexes = new List<Identifier>();
  }
  public override string ToString() {
    return
    "OccursOption(" +
    "Amount=" + this.Amount + "," +
    "UpperBound=" + this.UpperBound + "," +
    "DependsOn=" + this.DependsOn + "," +
    "Keys=" + "[" +
    string.Join(",", this.Keys.Select(x => x.ToString())) +
    "]" + "," +
    "Indexes=" + "[" +
    string.Join(",", this.Indexes.Select(x => x.ToString())) +
    "]" +
    ")";
  }
}

public class SyncOption : Option {
  public bool HasLeft { get; set; }
  public bool HasRight { get; set; }
  public override string ToString() {
    return
    "SyncOption(" +
    "HasLeft=" + this.HasLeft + "," +
    "HasRight=" + this.HasRight +
    ")";
  }
}

public class JustOption : Option {
  public bool HasRight { get; set; }
  public override string ToString() {
    return
    "JustOption(" +
    "HasRight=" + this.HasRight +
    ")";
  }
}

public class BlankOption : Option {

  public override string ToString() {
    return
    "BlankOption(" +
    ")";
  }
}

public interface ValueOption : Option {}

public interface PictureOption : Option {}

public class PictureFormatOption : PictureOption {
  public string Type { get; set; }
  public Int Digits { get; set; }
  public string DecimalType { get; set; }
  public Int DecimalDigits { get; set; }
  public override string ToString() {
    return
    "PictureFormatOption(" +
    "Type=" + this.Type + "," +
    "Digits=" + this.Digits + "," +
    "DecimalType=" + this.DecimalType + "," +
    "DecimalDigits=" + this.DecimalDigits +
    ")";
  }
}

public class PictureStringOption : PictureOption {
  public String String { get; set; }
  public override string ToString() {
    return
    "PictureStringOption(" +
    "String=" + this.String +
    ")";
  }
}

public interface Indexer {}

public interface Usage : UsageOption {}

public class BinaryUsage : Usage {

  public override string ToString() {
    return
    "BinaryUsage(" +
    ")";
  }
}

public class CompUsage : Usage {
  public string Level { get; set; }
  public override string ToString() {
    return
    "CompUsage(" +
    "Level=" + this.Level +
    ")";
  }
}

public class DisplayUsage : Usage {

  public override string ToString() {
    return
    "DisplayUsage(" +
    ")";
  }
}

public class IndexUsage : Usage {

  public override string ToString() {
    return
    "IndexUsage(" +
    ")";
  }
}

public class PackedDecimalUsage : Usage {

  public override string ToString() {
    return
    "PackedDecimalUsage(" +
    ")";
  }
}

public class Key {
  public bool HasAscending { get; set; }
  public bool HasDescending { get; set; }
  public List<Identifier> Identifiers { get; set; }
  public Key() {
    this.Identifiers = new List<Identifier>();
  }
  public override string ToString() {
    return
    "Key(" +
    "HasAscending=" + this.HasAscending + "," +
    "HasDescending=" + this.HasDescending + "," +
    "Identifiers=" + "[" +
    string.Join(",", this.Identifiers.Select(x => x.ToString())) +
    "]" +
    ")";
  }
}

public interface Index {}

public interface Symbolic : ValueOption {}

public interface Figurative : Symbolic {}

public class Zero : Figurative {

  public override string ToString() {
    return
    "Zero(" +
    ")";
  }
}

public class Space : Figurative {

  public override string ToString() {
    return
    "Space(" +
    ")";
  }
}

public class HighValue : Figurative {

  public override string ToString() {
    return
    "HighValue(" +
    ")";
  }
}

public class LowValue : Figurative {

  public override string ToString() {
    return
    "LowValue(" +
    ")";
  }
}

public class AllString : Figurative {
  public String String { get; set; }
  public override string ToString() {
    return
    "AllString(" +
    "String=" + this.String +
    ")";
  }
}

public class Null : Figurative {

  public override string ToString() {
    return
    "Null(" +
    ")";
  }
}

public interface PictureType {}

public interface DecimalPictureType {}

public class Identifier : Numeric, Index {
  public string Name { get; set; }
  public override string ToString() {
    return
    "Identifier(" +
    "Name=" + this.Name +
    ")";
  }
}

public interface Digit {}

public class Int : Literal, Numeric, Indexer {
  public string Value { get; set; }
  public override string ToString() {
    return
    "Int(" +
    "Value=" + this.Value +
    ")";
  }
}

public class Float : Literal {
  public string NextFloat { get; set; }
  public override string ToString() {
    return
    "Float(" +
    "NextFloat=" + this.NextFloat +
    ")";
  }
}

public class String : Literal {
  public string NextString { get; set; }
  public override string ToString() {
    return
    "String(" +
    "NextString=" + this.NextString +
    ")";
  }
}

public class Parser {
  private Parsable source;
  public Copybook AST { get; set; }

  public Parser Parse(string source) {
    this.source = new Parsable(source);
    this.AST    = this.ParseCopybook();
    if( ! this.source.IsDone ) {
      throw this.source.GenerateParseException("Could not parse remaining data");
    }
    return this;
  }

  public Copybook ParseCopybook() {
    List<Record> records = new List<Record>();
    this.Log("ParseCopybook");
    int pos = this.source.position;
    try {
      {
        Record temp;
        while(true) {
          try {
            temp = this.ParseRecord();
          } catch(ParseException) {
            break;
          }
          records.Add(temp);
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Copybook.", e
      );
    }
    return new Copybook() {
      Records = records
    };
  }

  public Record ParseRecord() {
    Record alternative = null;
    this.Log("ParseRecord");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseRenamesRecord();
      } catch(ParseException) {
        try {
          alternative = this.ParseValuesRecord();
        } catch(ParseException) {
          try {
            alternative = this.ParseBasicRecord();
          } catch(ParseException) {
            throw this.source.GenerateParseException(
            "Expected: renames-record | values-record | basic-record"
            );
          }
        }
      }
      this.source.Consume(".");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Record.", e
      );
    }
    return alternative;
  }

  public RenamesRecord ParseRenamesRecord() {
    LevelName levelName = null;
    IdentifierRange identifierRange = null;
    this.Log("ParseRenamesRecord");
    int pos = this.source.position;
    try {
      this.source.Consume("66");
      levelName = this.ParseLevelName();
      this.source.Consume("RENAMES");
      identifierRange = this.ParseIdentifierRange();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse RenamesRecord.", e
      );
    }
    return new RenamesRecord() {
      LevelName = levelName,
      IdentifierRange = identifierRange
    };
  }

  public LevelName ParseLevelName() {
    bool hasFiller = false;
    Identifier identifier = null;
    this.Log("ParseLevelName");
    int pos = this.source.position;
    try {
      try {
        this.source.Consume("FILLER");
        hasFiller = true;
      } catch(ParseException) {
        try {
          identifier = this.ParseIdentifier();
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: FILLER | identifier"
          );
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse LevelName.", e
      );
    }
    return new LevelName() {
      HasFiller = hasFiller,
      Identifier = identifier
    };
  }

  public IdentifierRange ParseIdentifierRange() {
    Identifier identifier = null;
    Identifier through = null;
    this.Log("ParseIdentifierRange");
    int pos = this.source.position;
    try {
      identifier = this.ParseIdentifier();
      {
        int pos563 = this.source.position;
        try {
          try {
            this.source.Consume("THRU");
          } catch(ParseException) {
            try {
              this.source.Consume("THROUGH");
            } catch(ParseException) {
              throw this.source.GenerateParseException(
              "Expected: THRU | THROUGH"
              );
            }
          }
          through = this.ParseIdentifier();
        } catch(ParseException) {
          this.source.position = pos563;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse IdentifierRange.", e
      );
    }
    return new IdentifierRange() {
      Identifier = identifier,
      Through = through
    };
  }

  public ValuesRecord ParseValuesRecord() {
    LevelName levelName = null;
    List<Value> values = new List<Value>();
    this.Log("ParseValuesRecord");
    int pos = this.source.position;
    try {
      this.source.Consume("88");
      levelName = this.ParseLevelName();
      this.source.Consume("VALUES");
      {
        int pos146 = this.source.position;
        try {
          try {
            this.source.Consume("IS");
          } catch(ParseException) {
            try {
              this.source.Consume("ARE");
            } catch(ParseException) {
              throw this.source.GenerateParseException(
              "Expected: IS | ARE"
              );
            }
          }
        } catch(ParseException) {
          this.source.position = pos146;
        }
      }
      {
        Value temp;
        while(true) {
          try {
            temp = this.ParseValue();
          } catch(ParseException) {
            break;
          }
          values.Add(temp);
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse ValuesRecord.", e
      );
    }
    return new ValuesRecord() {
      LevelName = levelName,
      Values = values
    };
  }

  public Value ParseValue() {
    Value alternative = null;
    this.Log("ParseValue");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseLiteral();
      } catch(ParseException) {
        try {
          alternative = this.ParseVariable();
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: literal | variable"
          );
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Value.", e
      );
    }
    return alternative;
  }

  public Literal ParseLiteral() {
    Literal alternative = null;
    this.Log("ParseLiteral");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseInt();
      } catch(ParseException) {
        try {
          alternative = this.ParseFloat();
        } catch(ParseException) {
          try {
            alternative = this.ParseString();
          } catch(ParseException) {
            throw this.source.GenerateParseException(
            "Expected: int | float | string"
            );
          }
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Literal.", e
      );
    }
    return alternative;
  }

  public Variable ParseVariable() {
    Identifier identifier = null;
    Subset subset = null;
    this.Log("ParseVariable");
    int pos = this.source.position;
    try {
      identifier = this.ParseIdentifier();
      {
        int pos383 = this.source.position;
        try {
          this.source.Consume("(");
          subset = this.ParseSubset();
          this.source.Consume(")");
        } catch(ParseException) {
          this.source.position = pos383;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Variable.", e
      );
    }
    return new Variable() {
      Identifier = identifier,
      Subset = subset
    };
  }

  public Subset ParseSubset() {
    Numeric limit = null;
    Subset next = null;
    this.Log("ParseSubset");
    int pos = this.source.position;
    try {
      limit = this.ParseNumeric();
      {
        int pos799 = this.source.position;
        try {
          this.source.Consume(":");
          next = this.ParseSubset();
        } catch(ParseException) {
          this.source.position = pos799;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Subset.", e
      );
    }
    return new Subset() {
      Limit = limit,
      Next = next
    };
  }

  public Numeric ParseNumeric() {
    Numeric alternative = null;
    this.Log("ParseNumeric");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseInt();
      } catch(ParseException) {
        try {
          alternative = this.ParseIdentifier();
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: int | identifier"
          );
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Numeric.", e
      );
    }
    return alternative;
  }

  public BasicRecord ParseBasicRecord() {
    Int level = null;
    LevelName levelName = null;
    List<Option> options = new List<Option>();
    this.Log("ParseBasicRecord");
    int pos = this.source.position;
    try {
      level = this.ParseInt();
      levelName = this.ParseLevelName();
      {
        Option temp;
        while(true) {
          try {
            temp = this.ParseOption();
          } catch(ParseException) {
            break;
          }
          options.Add(temp);
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse BasicRecord.", e
      );
    }
    return new BasicRecord() {
      Level = level,
      LevelName = levelName,
      Options = options
    };
  }

  public Option ParseOption() {
    Option alternative = null;
    this.Log("ParseOption");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseRedefinesOption();
      } catch(ParseException) {
        try {
          alternative = this.ParseExternalOption();
        } catch(ParseException) {
          try {
            alternative = this.ParseInternalOption();
          } catch(ParseException) {
            try {
              alternative = this.ParsePictureOption();
            } catch(ParseException) {
              try {
                alternative = this.ParseUsageOption();
              } catch(ParseException) {
                try {
                  alternative = this.ParseSignOption();
                } catch(ParseException) {
                  try {
                    alternative = this.ParseOccursOption();
                  } catch(ParseException) {
                    try {
                      alternative = this.ParseSyncOption();
                    } catch(ParseException) {
                      try {
                        alternative = this.ParseJustOption();
                      } catch(ParseException) {
                        try {
                          alternative = this.ParseBlankOption();
                        } catch(ParseException) {
                          try {
                            alternative = this.ParseValueOption();
                          } catch(ParseException) {
                            throw this.source.GenerateParseException(
                            "Expected: redefines-option | external-option | internal-option | picture-option | usage-option | sign-option | occurs-option | sync-option | just-option | blank-option | value-option"
                            );
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Option.", e
      );
    }
    return alternative;
  }

  public RedefinesOption ParseRedefinesOption() {
    Identifier redefined = null;
    this.Log("ParseRedefinesOption");
    int pos = this.source.position;
    try {
      this.source.Consume("REDEFINES");
      redefined = this.ParseIdentifier();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse RedefinesOption.", e
      );
    }
    return new RedefinesOption() {
      Redefined = redefined
    };
  }

  public ExternalOption ParseExternalOption() {
    this.Log("ParseExternalOption");
    int pos = this.source.position;
    try {
      {
        int pos674 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos674;
        }
      }
      this.source.Consume("EXTERNAL");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse ExternalOption.", e
      );
    }
    return new ExternalOption() {
    };
  }

  public InternalOption ParseInternalOption() {
    this.Log("ParseInternalOption");
    int pos = this.source.position;
    try {
      {
        int pos36 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos36;
        }
      }
      this.source.Consume("INTERNAL");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse InternalOption.", e
      );
    }
    return new InternalOption() {
    };
  }

  public Usage ParseUsageOption() {
    Usage usage = null;
    this.Log("ParseUsageOption");
    int pos = this.source.position;
    try {
      {
        int pos664 = this.source.position;
        try {
          this.source.Consume("USAGE");
          {
            int pos300 = this.source.position;
            try {
              this.source.Consume("IS");
            } catch(ParseException) {
              this.source.position = pos300;
            }
          }
        } catch(ParseException) {
          this.source.position = pos664;
        }
      }
      usage = this.ParseUsage();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse UsageOption.", e
      );
    }
    return usage;
  }

  public SignOption ParseSignOption() {
    bool hasLeading = false;
    bool hasTrailing = false;
    bool hasSeparate = false;
    bool hasCharacter = false;
    this.Log("ParseSignOption");
    int pos = this.source.position;
    try {
      this.source.Consume("SIGN");
      {
        int pos296 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos296;
        }
      }
      try {
        this.source.Consume("LEADING");
        hasLeading = true;
      } catch(ParseException) {
        try {
          this.source.Consume("TRAILING");
          hasTrailing = true;
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: LEADING | TRAILING"
          );
        }
      }
      {
        int pos347 = this.source.position;
        try {
          this.source.Consume("SEPARATE");
          hasSeparate = true;
          {
            int pos289 = this.source.position;
            try {
              this.source.Consume("CHARACTER");
              hasCharacter = true;
            } catch(ParseException) {
              this.source.position = pos289;
            }
          }
        } catch(ParseException) {
          this.source.position = pos347;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse SignOption.", e
      );
    }
    return new SignOption() {
      HasLeading = hasLeading,
      HasTrailing = hasTrailing,
      HasSeparate = hasSeparate,
      HasCharacter = hasCharacter
    };
  }

  public OccursOption ParseOccursOption() {
    Numeric amount = null;
    Numeric upperBound = null;
    Identifier dependsOn = null;
    List<Key> keys = new List<Key>();
    List<Identifier> indexes = new List<Identifier>();
    this.Log("ParseOccursOption");
    int pos = this.source.position;
    try {
      this.source.Consume("OCCURS");
      amount = this.ParseNumeric();
      {
        int pos690 = this.source.position;
        try {
          this.source.Consume("TO");
          upperBound = this.ParseNumeric();
        } catch(ParseException) {
          this.source.position = pos690;
        }
      }
      {
        int pos682 = this.source.position;
        try {
          this.source.Consume("TIMES");
        } catch(ParseException) {
          this.source.position = pos682;
        }
      }
      {
        int pos480 = this.source.position;
        try {
          this.source.Consume("DEPENDING");
          {
            int pos99 = this.source.position;
            try {
              this.source.Consume("ON");
            } catch(ParseException) {
              this.source.position = pos99;
            }
          }
          dependsOn = this.ParseIdentifier();
        } catch(ParseException) {
          this.source.position = pos480;
        }
      }
      {
        Key temp;
        while(true) {
          try {
            temp = this.ParseKey();
          } catch(ParseException) {
            break;
          }
          keys.Add(temp);
        }
      }
      {
        Identifier temp;
        while(true) {
          try {
            temp = this.ParseIndex();
          } catch(ParseException) {
            break;
          }
          indexes.Add(temp);
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse OccursOption.", e
      );
    }
    return new OccursOption() {
      Amount = amount,
      UpperBound = upperBound,
      DependsOn = dependsOn,
      Keys = keys,
      Indexes = indexes
    };
  }

  public SyncOption ParseSyncOption() {
    bool hasLeft = false;
    bool hasRight = false;
    this.Log("ParseSyncOption");
    int pos = this.source.position;
    try {
      this.source.Consume("SYNC");
      {
        int pos416 = this.source.position;
        try {
          this.source.Consume("HRONIZED");
        } catch(ParseException) {
          this.source.position = pos416;
        }
      }
      {
        int pos121 = this.source.position;
        try {
          try {
            this.source.Consume("LEFT");
            hasLeft = true;
          } catch(ParseException) {
            try {
              this.source.Consume("RIGHT");
              hasRight = true;
            } catch(ParseException) {
              throw this.source.GenerateParseException(
              "Expected: LEFT | RIGHT"
              );
            }
          }
        } catch(ParseException) {
          this.source.position = pos121;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse SyncOption.", e
      );
    }
    return new SyncOption() {
      HasLeft = hasLeft,
      HasRight = hasRight
    };
  }

  public JustOption ParseJustOption() {
    bool hasRight = false;
    this.Log("ParseJustOption");
    int pos = this.source.position;
    try {
      this.source.Consume("JUST");
      {
        int pos100 = this.source.position;
        try {
          this.source.Consume("IFIED");
        } catch(ParseException) {
          this.source.position = pos100;
        }
      }
      {
        int pos983 = this.source.position;
        try {
          this.source.Consume("RIGHT");
          hasRight = true;
        } catch(ParseException) {
          this.source.position = pos983;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse JustOption.", e
      );
    }
    return new JustOption() {
      HasRight = hasRight
    };
  }

  public BlankOption ParseBlankOption() {
    this.Log("ParseBlankOption");
    int pos = this.source.position;
    try {
      this.source.Consume("BLANK");
      {
        int pos327 = this.source.position;
        try {
          this.source.Consume("WHEN");
        } catch(ParseException) {
          this.source.position = pos327;
        }
      }
      this.source.Consume("ZERO");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse BlankOption.", e
      );
    }
    return new BlankOption() {
    };
  }

  public Symbolic ParseValueOption() {
    Symbolic symbolic = null;
    this.Log("ParseValueOption");
    int pos = this.source.position;
    try {
      this.source.Consume("VALUE");
      {
        int pos956 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos956;
        }
      }
      symbolic = this.ParseSymbolic();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse ValueOption.", e
      );
    }
    return symbolic;
  }

  public PictureOption ParsePictureOption() {
    PictureOption alternative = null;
    this.Log("ParsePictureOption");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParsePictureFormatOption();
      } catch(ParseException) {
        try {
          alternative = this.ParsePictureStringOption();
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: picture-format-option | picture-string-option"
          );
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse PictureOption.", e
      );
    }
    return alternative;
  }

  public PictureFormatOption ParsePictureFormatOption() {
    string type = null;
    Int digits = null;
    string decimalType = null;
    Int decimalDigits = null;
    this.Log("ParsePictureFormatOption");
    int pos = this.source.position;
    try {
      this.source.Consume("PIC");
      {
        int pos420 = this.source.position;
        try {
          this.source.Consume("TURE");
        } catch(ParseException) {
          this.source.position = pos420;
        }
      }
      {
        int pos498 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos498;
        }
      }
      type = this.source.Consume(Extracting.PictureType);
      {
        int pos563 = this.source.position;
        try {
          digits = this.ParseIndexer();
        } catch(ParseException) {
          this.source.position = pos563;
        }
      }
      {
        int pos427 = this.source.position;
        try {
          {
            int pos808 = this.source.position;
            try {
              try {
                this.source.Consume("V");
              } catch(ParseException) {
                try {
                  this.source.Consume(".");
                } catch(ParseException) {
                  throw this.source.GenerateParseException(
                  "Expected: V | ."
                  );
                }
              }
            } catch(ParseException) {
              this.source.position = pos808;
            }
          }
          decimalType = this.source.Consume(Extracting.DecimalPictureType);
          {
            int pos721 = this.source.position;
            try {
              decimalDigits = this.ParseIndexer();
            } catch(ParseException) {
              this.source.position = pos721;
            }
          }
        } catch(ParseException) {
          this.source.position = pos427;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse PictureFormatOption.", e
      );
    }
    return new PictureFormatOption() {
      Type = type,
      Digits = digits,
      DecimalType = decimalType,
      DecimalDigits = decimalDigits
    };
  }

  public PictureStringOption ParsePictureStringOption() {
    String text = null;
    this.Log("ParsePictureStringOption");
    int pos = this.source.position;
    try {
      this.source.Consume("PIC");
      {
        int pos312 = this.source.position;
        try {
          this.source.Consume("TURE");
        } catch(ParseException) {
          this.source.position = pos312;
        }
      }
      {
        int pos513 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos513;
        }
      }
      text = this.ParseString();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse PictureStringOption.", e
      );
    }
    return new PictureStringOption() {
      String = text
    };
  }

  public Int ParseIndexer() {
    Int index = null;
    this.Log("ParseIndexer");
    int pos = this.source.position;
    try {
      this.source.Consume("(");
      index = this.ParseInt();
      this.source.Consume(")");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Indexer.", e
      );
    }
    return index;
  }

  public Usage ParseUsage() {
    Usage alternative = null;
    this.Log("ParseUsage");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseBinaryUsage();
      } catch(ParseException) {
        try {
          alternative = this.ParseCompUsage();
        } catch(ParseException) {
          try {
            alternative = this.ParseDisplayUsage();
          } catch(ParseException) {
            try {
              alternative = this.ParseIndexUsage();
            } catch(ParseException) {
              try {
                alternative = this.ParsePackedDecimalUsage();
              } catch(ParseException) {
                throw this.source.GenerateParseException(
                "Expected: binary-usage | comp-usage | display-usage | index-usage | packed-decimal-usage"
                );
              }
            }
          }
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Usage.", e
      );
    }
    return alternative;
  }

  public BinaryUsage ParseBinaryUsage() {
    this.Log("ParseBinaryUsage");
    int pos = this.source.position;
    try {
      this.source.Consume("BINARY");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse BinaryUsage.", e
      );
    }
    return new BinaryUsage() {
    };
  }

  public CompUsage ParseCompUsage() {
    string level = null;
    this.Log("ParseCompUsage");
    int pos = this.source.position;
    try {
      this.source.Consume("COMP");
      {
        int pos293 = this.source.position;
        try {
          this.source.Consume("UTATIONAL");
        } catch(ParseException) {
          this.source.position = pos293;
        }
      }
      {
        int pos912 = this.source.position;
        try {
          this.source.Consume("-");
          level = this.source.Consume(Extracting.Digit);
        } catch(ParseException) {
          this.source.position = pos912;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse CompUsage.", e
      );
    }
    return new CompUsage() {
      Level = level
    };
  }

  public DisplayUsage ParseDisplayUsage() {
    this.Log("ParseDisplayUsage");
    int pos = this.source.position;
    try {
      this.source.Consume("DISPLAY");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse DisplayUsage.", e
      );
    }
    return new DisplayUsage() {
    };
  }

  public IndexUsage ParseIndexUsage() {
    this.Log("ParseIndexUsage");
    int pos = this.source.position;
    try {
      this.source.Consume("INDEX");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse IndexUsage.", e
      );
    }
    return new IndexUsage() {
    };
  }

  public PackedDecimalUsage ParsePackedDecimalUsage() {
    this.Log("ParsePackedDecimalUsage");
    int pos = this.source.position;
    try {
      this.source.Consume("PACKED-DECIMAL");
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse PackedDecimalUsage.", e
      );
    }
    return new PackedDecimalUsage() {
    };
  }

  public Key ParseKey() {
    bool hasAscending = false;
    bool hasDescending = false;
    List<Identifier> identifiers = new List<Identifier>();
    this.Log("ParseKey");
    int pos = this.source.position;
    try {
      try {
        this.source.Consume("ASCENDING");
        hasAscending = true;
      } catch(ParseException) {
        try {
          this.source.Consume("DESCENDING");
          hasDescending = true;
        } catch(ParseException) {
          throw this.source.GenerateParseException(
          "Expected: ASCENDING | DESCENDING"
          );
        }
      }
      {
        int pos773 = this.source.position;
        try {
          this.source.Consume("KEY");
        } catch(ParseException) {
          this.source.position = pos773;
        }
      }
      {
        int pos72 = this.source.position;
        try {
          this.source.Consume("IS");
        } catch(ParseException) {
          this.source.position = pos72;
        }
      }
      {
        Identifier temp;
        while(true) {
          try {
            temp = this.ParseIdentifier();
          } catch(ParseException) {
            break;
          }
          identifiers.Add(temp);
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Key.", e
      );
    }
    return new Key() {
      HasAscending = hasAscending,
      HasDescending = hasDescending,
      Identifiers = identifiers
    };
  }

  public Identifier ParseIndex() {
    Identifier identifier = null;
    this.Log("ParseIndex");
    int pos = this.source.position;
    try {
      this.source.Consume("INDEXED");
      {
        int pos909 = this.source.position;
        try {
          this.source.Consume("BY");
        } catch(ParseException) {
          this.source.position = pos909;
        }
      }
      identifier = this.ParseIdentifier();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Index.", e
      );
    }
    return identifier;
  }

  public Symbolic ParseSymbolic() {
    Symbolic alternative = null;
    this.Log("ParseSymbolic");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseLiteral();
      } catch(ParseException) {
        try {
          alternative = this.ParseVariable();
        } catch(ParseException) {
          try {
            alternative = this.ParseFigurative();
          } catch(ParseException) {
            throw this.source.GenerateParseException(
            "Expected: literal | variable | figurative"
            );
          }
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Symbolic.", e
      );
    }
    return alternative;
  }

  public Figurative ParseFigurative() {
    Figurative alternative = null;
    this.Log("ParseFigurative");
    int pos = this.source.position;
    try {
      try {
        alternative = this.ParseZero();
      } catch(ParseException) {
        try {
          alternative = this.ParseSpace();
        } catch(ParseException) {
          try {
            alternative = this.ParseHighValue();
          } catch(ParseException) {
            try {
              alternative = this.ParseLowValue();
            } catch(ParseException) {
              try {
                alternative = this.ParseAllString();
              } catch(ParseException) {
                try {
                  alternative = this.ParseNull();
                } catch(ParseException) {
                  throw this.source.GenerateParseException(
                  "Expected: zero | space | high-value | low-value | all-string | null"
                  );
                }
              }
            }
          }
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Figurative.", e
      );
    }
    return alternative;
  }

  public Zero ParseZero() {
    this.Log("ParseZero");
    int pos = this.source.position;
    try {
      this.source.Consume("ZERO");
      {
        int pos498 = this.source.position;
        try {
          this.source.Consume("ES");
        } catch(ParseException) {
          this.source.position = pos498;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Zero.", e
      );
    }
    return new Zero() {
    };
  }

  public Space ParseSpace() {
    this.Log("ParseSpace");
    int pos = this.source.position;
    try {
      this.source.Consume("SPACE");
      {
        int pos863 = this.source.position;
        try {
          this.source.Consume("S");
        } catch(ParseException) {
          this.source.position = pos863;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Space.", e
      );
    }
    return new Space() {
    };
  }

  public HighValue ParseHighValue() {
    this.Log("ParseHighValue");
    int pos = this.source.position;
    try {
      this.source.Consume("HIGH-VALUE");
      {
        int pos293 = this.source.position;
        try {
          this.source.Consume("S");
        } catch(ParseException) {
          this.source.position = pos293;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse HighValue.", e
      );
    }
    return new HighValue() {
    };
  }

  public LowValue ParseLowValue() {
    this.Log("ParseLowValue");
    int pos = this.source.position;
    try {
      this.source.Consume("LOW-VALUE");
      {
        int pos507 = this.source.position;
        try {
          this.source.Consume("S");
        } catch(ParseException) {
          this.source.position = pos507;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse LowValue.", e
      );
    }
    return new LowValue() {
    };
  }

  public AllString ParseAllString() {
    String text = null;
    this.Log("ParseAllString");
    int pos = this.source.position;
    try {
      this.source.Consume("ALL");
      text = this.ParseString();
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse AllString.", e
      );
    }
    return new AllString() {
      String = text
    };
  }

  public Null ParseNull() {
    this.Log("ParseNull");
    int pos = this.source.position;
    try {
      this.source.Consume("NULL");
      {
        int pos677 = this.source.position;
        try {
          this.source.Consume("S");
        } catch(ParseException) {
          this.source.position = pos677;
        }
      }
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Null.", e
      );
    }
    return new Null() {
    };
  }

  public Identifier ParseIdentifier() {
    string name = null;
    this.Log("ParseIdentifier");
    int pos = this.source.position;
    try {
      name = this.source.Consume(Extracting.Identifier);
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Identifier.", e
      );
    }
    return new Identifier() {
      Name = name
    };
  }

  public Int ParseInt() {
    string value = null;
    this.Log("ParseInt");
    int pos = this.source.position;
    try {
      value = this.source.Consume(Extracting.Int);
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Int.", e
      );
    }
    return new Int() {
      Value = value
    };
  }

  public Float ParseFloat() {
    string floating = null;
    this.Log("ParseFloat");
    int pos = this.source.position;
    try {
      floating = this.source.Consume(Extracting.Float);
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse Float.", e
      );
    }
    return new Float() {
      NextFloat = floating
    };
  }

  public String ParseString() {
    string text = null;
    this.Log("ParseString");
    int pos = this.source.position;
    try {
      text = this.source.Consume(Extracting.String);
    } catch(ParseException e) {
      this.source.position = pos;
      throw this.source.GenerateParseException(
      "Failed to parse String.", e
      );
    }
    return new String() {
      NextString = text
    };
  }


  [ConditionalAttribute("DEBUG")]
  private void Log(string msg) {
    Console.Error.WriteLine("!!! " + msg + " @ " + this.source.Peek(10).Replace('\n', 'n'));
  }
}

public class Extracting {
  public static Regex PictureType = new Regex(@"^([9AXVSP]+)");
  public static Regex DecimalPictureType = new Regex(@"^([9]+)");
  public static Regex Identifier = new Regex(@"^([A-Z][A-Z0-9-]*)");
  public static Regex Digit = new Regex(@"^([0-9])");
  public static Regex Int = new Regex(@"^([-+]?[0-9]*)");
  public static Regex Float = new Regex(@"^([-+]?[0-9]*\.?[0-9]*)");
  public static Regex String = new Regex(@"^""([^""]*)""|'([^']*)'");
}
